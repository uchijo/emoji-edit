import Head from "next/head";
import {
  Box,
  Button,
  Card,
  Container,
  Group,
  ScrollArea,
  Text,
  Title,
} from "@mantine/core";
import { useFavoriteEmojis } from "@/utils/use/useFavoriteEmojis";
import { EmojiDisplay } from "@/components/emojiDisplay";
import { Emoji } from "@/model/emoji/emoji";
import { GridModel } from "@/model/grid/grid";
import { GridCellModel } from "@/model/grid/gridCell";
import { useState } from "react";
import { CanvasGrid } from "@/components/canvasGrid";
import { Preview } from "@/components/preview";
import { PostButton } from "@/components/postButton";
import Link from "next/link";
import { CopyShortCodeButton } from "@/components/copyShortCodeButton";

export default function Home() {
  const emoji1 = new Emoji(
    "shortcode1",
    "https://raw.githubusercontent.com/Lokuyow/Lokuyow.github.io/main/images/nostr/emoji/kami.png"
  );
  const cell1 = new GridCellModel();
  cell1.setEmoji(emoji1);

  const { error, data, isLoading } = useFavoriteEmojis();
  const [grid, setGrid] = useState<GridModel>(GridModel.fromSize(10, 7));

  return (
    <>
      <Head>
        <title>絵文字コネコネ</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Container>
          <Title order={2}>絵文字コネコネ</Title>
          <Text my={5}>
            グリッド上で絵文字をポチポチして投稿を作成できるツールです。
            <br />
            現状では縦:横が1:1の絵文字にのみ対応しており、それ以外を使うとバグります。
            <br />
            NIP-07にリレーと秘密鍵が登録してある状態でのみ使用可能です。
          </Text>
          <Text my={5}>
            設定したいセルにカーソルを合わせると選択やリセットなどのメニューが出てきます。
            セルを選択した上で、ページ下に表示されるお気に入り絵文字をクリックすることで、グリッドに絵文字を設定可能です。
            <br />
            eと表示されているセルは空白になっているセルで、青いセルが現在選択中のセルです。
            <br />
            空白は勝手に補完されるので、左側に透明な絵文字を入れる必要はありません。
            <br />
            <Link href="https://emojito.meme/a/naddr1qq2k2mt0df5j6etyd96z6etdwp68jtt0dek8jqgdwaehxw309ahx7uewd3hkcq3quchj055pfgj3w8zxd5khvy4drgrxmvfk9d8zt8d4cpm0ne4jrjmsxpqqqp65u8jqpxz">
              この絵文字セット
            </Link>
            に含まれる:empty:を利用しているので、shortcodeをコピペしてnoStrudel等から投稿する場合はブックマークが必要かもしれません。
          </Text>

          <Card my="lg" shadow="sm" padding="lg" radius="md" withBorder>
            <Title order={3} mb={10}>
              編集
            </Title>
            <Box
              style={{
                display: "flex",
              }}
            ></Box>
            <CanvasGrid grid={grid} setGrid={setGrid} />

            <Button my="sm" fullWidth={false} onClick={() => {
              setGrid(GridModel.fromSize(grid.sizeX, grid.sizeY))
            }}>
              リセット
            </Button>
          </Card>

          <Card my="lg" shadow="sm" padding="lg" radius="md" withBorder>
            <Title order={3} mb={10}>
              プレビュー
            </Title>
            <Preview grid={grid} />
            <Group>
              <CopyShortCodeButton grid={grid} />
              <PostButton grid={grid} />
            </Group>
          </Card>

          {data == undefined ? (
            error !== undefined ? (
              <Text>エラー発生！{error.message}</Text>
            ) : (
              <Text>読込中</Text>
            )
          ) : (
            <>
              <ScrollArea h={500}>
                {data!.map((list) => (
                  <Card
                    my="lg"
                    shadow="sm"
                    padding="lg"
                    radius="md"
                    withBorder
                    key={`${list.title}${list.author}`}
                  >
                    <Title order={5}>{list.title ?? list.identifier}</Title>
                    <Group mt="sm">
                      {list.emojiList.map((elem) => (
                        <EmojiDisplay
                          emoji={elem}
                          key={`${elem.url}${elem.shortcode}`}
                          onClick={() => {
                            if (!grid.currentFocus) {
                              return;
                            }
                            setGrid(
                              grid.setAt(
                                grid.currentFocus.x,
                                grid.currentFocus.y,
                                elem
                              )
                            );
                          }}
                        />
                      ))}
                    </Group>
                  </Card>
                ))}
                <Box h={400} />
              </ScrollArea>
            </>
          )}
        </Container>
      </main>
    </>
  );
}
